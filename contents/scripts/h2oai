#!/bin/bash

# This is a general control script for lifecycle manamgement of H2oAI within Docker
#
# For Ubuntu use: ubuntu
# For Amazon Linux, RedHat or CentOS change USERNAME to use: ec2-user

# Training image addition: add "-p 8080:8080" to the ports exposed in the docker 
# for demoing REST server deployment

DAI_USER=ubuntu
DATE=`date +%Y-%m-%d.%H:%M:%S`
RELEASE_TAG="$(cat /home/$DAI_USER/DAI_RELEASE)"

case "$1" in

start)
  echo "Starting DAI Release $RELEASE_TAG"
  if [ -e /home/$DAI_USER/tmp/h2oai.pid ]; then
    echo H2oAI is already running, pid=`cat /home/$DAI_USER/tmp/h2oai.pid`
    exit 1
  else
    if nvidia-smi | grep -o "failed";
      then
        echo "Starting CPU only"
        docker run --init --rm --pid=host --shm-size=256m -e DRIVERLESS_AI_CONFIG_FILE="/config/config.toml" -p 9050:9050 -p 9090:9090 -p 12345:12345 -p 54321:54321 -p 8888:8888 -p 8080:8080 -u `id -u`:`id -g` -v /home/$DAI_USER/config:/config -v /home/$DAI_USER/data:/data -v /home/$DAI_USER/log:/log -v /home/$DAI_USER/tmp:/tmp -v /home/$DAI_USER/jupyter/notebooks:/jupyter/notebooks -v /home/$DAI_USER/license:/license -v /home/$DAI_USER/demo:/demo h2oai/dai-centos7-x86_64:$RELEASE_TAG &
    else
      echo "Setting persistence"
      sudo nvidia-smi -pm 1
      echo "Staring GPU Enabled"
      nvidia-docker run --init --rm --pid=host --shm-size=256m -e DRIVERLESS_AI_CONFIG_FILE="/config/config.toml" -p 9050:9050 -p 9090:9090 -p 12345:12345 -p 54321:54321 -p 8888:8888 -p 8080:8080 -u `id -u`:`id -g` -v /home/$DAI_USER/config:/config -v /home/$DAI_USER/data:/data -v /home/$DAI_USER/log:/log -v /home/$DAI_USER/tmp:/tmp -v /home/$DAI_USER/jupyter/notebooks:/jupyter/notebooks -v /home/$DAI_USER/license:/license  -v /home/$DAI_USER/demo:/demo h2oai/dai-centos7-x86_64:$RELEASE_TAG &
    fi
    echo $!>/home/$DAI_USER/tmp/h2oai.pid 
  fi
  ;;

stop)
  if [ -e /home/$DAI_USER/tmp/h2oai.pid ]; then
    echo "Stopping H2oai"
    docker stop `docker ps | awk 'FNR == 2 {print $1}'`
    rm /home/$DAI_USER/tmp/h2oai.pid
  else
    echo "H2oAI is NOT running"
    docker stop `docker ps | awk 'FNR == 2 {print $1}'`
    exit 1
  fi
  ;;

restart)
  echo "Restarting H2oAI"
  $0 stop
  $0 start
  ;;

status)
  if [ -e /home/$DAI_USER/tmp/h2oai.pid ]; then
    echo H2oAI is running, pid=`cat /home/$DAI_USER/tmp/h2oai.pid`
    echo "Current docker processes"
    docker ps -a
  else
    echo "H2oAI is NOT running"
    docker ps -a
    exit 1
  fi
  ;;

clean)
  echo "Cleaning up stopped images"
  docker ps -a | grep Exit | cut -d ' ' -f 1 | xargs docker rm
  docker rmi $(docker images -f "dangling=true" -q)
  ;;

purge)
  echo "Removing old log files"
  rm -rf /home/$DAI_USER/tmp/*
  rm -rf /home/$DAI_USER/log/*
  ;;

ssh)
  if [ -e /home/$DAI_USER/tmp/h2oai.pid ]; then
    CONTAINER_ID=`docker ps | awk 'FNR == 2 {print $1}'`
    docker exec -it $CONTAINER_ID bash
  else
    echo "H2oAI is NOT running"
    exit 1
  fi
  ;;

release)
  $0 update
  ;; 

update)
  echo "Please visit http://h2o.ai and view the latest releases and documentation"
  ;;
*)

  echo "Usage: h2oai {start|status|stop|restart|update|clean|purge|ssh}"
  echo "h2oai stop     (Stop all instances)"
  echo "h2oai start    (Start an instance)"
  echo "h2oai restart  (Restart instance)"
  echo "h2oai clean    (Removes old conatianers)"
  echo "h2oai purge    (Removes old containers and purges tmp and log)"
  echo "h2oai update   (Upgrades image to latest Release)"
  echo "h2oai ssh      (Attaches to running docker)"
esac

exit 0 
